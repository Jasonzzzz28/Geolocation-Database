package cmsc420.meeshquest.part2;

import org.w3c.dom.*;

import java.util.Comparator;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

/**
 * SG-Tree implementation for CMSC 420, Fall 2019 by David Mount.
 *
 * This is an extended-tree version of a scapegoat tree. We follow the basic
 * structure of the scapegoat tree. The size of a node is defined to be the
 * number of external nodes that are descended from it, and the height is
 * defined to be the length of the longest path to any external node.
 *
 * The algorithm maintains two size values, nItems (n) and maxItems (m).
 * Whenever an item is inserted, both quantities are increments. Whenever an
 * item is deleted, nItems is decremented.
 * 
 * The insert function descends the tree and adds a new external node at the
 * appropriate location. If the tree's height exceeds
 * 
 * log_{3/2} maxItems
 * 
 * we traverse the search path starting at the root until finding a node u such
 * that
 * 
 * size(u.child)/size(u) > 2/3.
 * 
 * (Such a node is guaranteed to exist.) The subtree at u is completely rebuilt
 * into a perfectly balanced form. (If there are an odd number of points, the
 * additional point is stored in the left subtree.)
 *
 * The delete function finds the external node that contains the item to be
 * deleted. It deletes this item and decrements nItems. If
 *
 * nItems < 2*maxItems,
 *
 * the entire tree is rebuilt.
 *
 * Generic Elements:
 * 
 * The tree is parameterized by a type P, called a point, which is assumed to
 * implement the interface NamedPoint2D. Such an object supports the functions
 * getName(), getX(), and getY().
 * 
 * The constructor is provided a comparator, for comparing objects of type P.
 * For Meeshquest, this compares lexicographically by (x,y) coordinates.
 *
 * Node Structure:
 *
 * There are two types of nodes, internal and external. Internal nodes store a
 * splitting point. Points that are less than or equal to the splitter
 * (according to the comparator) go into the left subtree. External nodes just
 * store a single point. For the sake of rebalancing, internal nodes also store
 * the height and size of the subtree rooted at this node.
 */

public class SGTree<P extends NamedPoint2D> {

	private final boolean DEBUG = false; // produce extra debugging output
	private final int BALANCE_NUM = 2; // numerator in balance ratio
	private final int BALANCE_DENOM = 3; // denominator in balance ratio

	// -----------------------------------------------------------------
	// Node processing - Used internally only
	//
	// There are two types of nodes, external and internal. Values are
	// stored in external nodes, and internal nodes store keys only.
	// -----------------------------------------------------------------

	/**
	 * A node of the tree. This is an abstract object, which is extended for
	 * internal and external nodes.
	 */
	private abstract class Node { // generic node type
		final boolean isExternal; // is node external?

		Node(boolean isExternal) { // constructor
			this.isExternal = isExternal;
		}
		
		abstract P nearN(P point, P best) throws Exception;

		abstract P find(P pt); // find point in subtree

		abstract Node insert(P pt) throws Exception; // insert point into subtree

		abstract Node delete(P pt) throws Exception; // delete point from subtree

		abstract Node rebalance(P pt); // find scapegoat and rebalance tree

		abstract void entryList(List<P> list); // return list of entries in subtree

		abstract void print(Element result); // print subtree to result

		abstract String debugPrint(String prefix); // print for debugging

		abstract boolean check(P low, P high); // integrity check

		abstract public String toString(); // for debugging
	}

	// -----------------------------------------------------------------
	// Internal node
	// -----------------------------------------------------------------

	/**
	 * An internal node of the tree. The associated point is just used for splitting
	 * left and right subtrees by the associated comparator.
	 */
	private class InternalNode extends Node {

		final P splitter; // point object used for splitting
		int size; // node size (number of external descendants)
		int height; // node height (max number of edges to external)
		Node left; // children
		Node right;
		int SDim;
		Comparator<P> comparator;

		/**
		 * Constructor.
		 * 
		 * @param splitter The point used to split left (<=) from right (>)
		 * @param left     The left subtree
		 * @param right    The right subtree
		 */
		InternalNode(P splitter, Node left, Node right, int dim) {
			super(false);
			this.splitter = splitter;
			this.left = left;
			this.right = right;
			SDim = dim;
			if (dim == 0) {
				this.comparator = new OrderByCoordinate<P> ();
			}
			else {
				this.comparator = new YXcompare<P> ();
			}
			updateSizeAndHeight();
		}

		/**
		 * Find point in internal node.
		 *
		 * @param pt The point being sought.
		 */
		P find(P pt) {
			if (comparator.compare(pt, splitter) <= 0) {
				return left.find(pt);
			} else {
				return right.find(pt);
			}
		}

		/**
		 * Insert into this subtree. This just passes the request to the appropriate
		 * child.
		 *
		 * @param pt The point to insert.
		 * @return The updated subtree root after insertion.
		 */
		Node insert(P pt) throws Exception {
			if (comparator.compare(pt, splitter) <= 0) { // pt is less or equal
				left = left.insert(pt);
				updateSizeAndHeight(); // update this node's information
			} else { // pt is larger
				right = right.insert(pt);
				updateSizeAndHeight(); // update this node's information
			}
			return this;
		}

		/**
		 * Find the scapegoat node and rebalance the tree. Using the point to retrace
		 * the search path, we find the first (closest to root) node that fails the
		 * balance condition. We then rebuild this tree by invoking rebuild. Otherwise,
		 * we recurse on the appropriate child. Since rebuilding causes subtree heights
		 * to change, we update our size and height values just prior to returning.
		 *
		 * @param pt The point defining the search path.
		 * @return The updated subtree root after rebalancing.
		 */
		Node rebalance(P pt) {
			if (comparator.compare(pt, splitter) <= 0) { // pt is less or equal
				if (2 * getSize(this) < 3 * getSize(left)) { // too unbalanced?
					return rebuild(this); // this is the scapegoat
				} else { // balance is okay
					left = left.rebalance(pt); // continue the search
					updateSizeAndHeight(); // update this node's information
					return this;
				}
			} else { // pt is larger
				if (2 * getSize(this) < 3 * getSize(right)) { // too unbalanced?
					return rebuild(this); // this is the scapegoat
				} else { // balance is okay
					right = right.rebalance(pt); // continue the search
					updateSizeAndHeight(); // update this node's information
					return this;
				}
			}
		}

		/**
		 * Delete from this subtree. Since this is an extended tree, if we delete a
		 * child and find that it is null, then this child must be the external node
		 * containing the deleted value. We unlink ourselves from the tree by returning
		 * a pointer to our other child.
		 *
		 * @param pt The point to delete
		 * @return The updated root of the subtree
		 * @throws Exception If the point does not exist in the subtree
		 */
		Node delete(P pt) throws Exception {
			if (comparator.compare(pt, splitter) <= 0) { // delete from left
				left = left.delete(pt);
				if (left == null) {
					return right; // subtree gone, return sibling
				} else {
					updateSizeAndHeight(); // update this node's information
					return this;
				}
			} else { // delete from right
				right = right.delete(pt); // update this node's information
				if (right == null) {
					return left; // subtree gone, return sibling
				} else {
					updateSizeAndHeight();
					return this;
				}
			}
		}

		/**
		 * Updates the size and height of an internal node.
		 *
		 * @param p The node whose information is to be updated
		 */
		void updateSizeAndHeight() {
			size = getSize(left) + getSize(right);
			height = 1 + Math.max(getHeight(left), getHeight(right));
		}

		/**
		 * Add entries of this subtree to the list.
		 * 
		 * @param list list in which to store elements
		 */
		void entryList(List<P> list) {
			left.entryList(list);
			right.entryList(list);
		}

		/**
		 * Print node information to result.
		 * 
		 * @param element The document element in which to store result
		 *
		 */
		void print(Element element) {
			// print this item
			Element out = resultsDoc.createElement("internal");
			out.setAttribute("splitDim", Integer.toString((int) SDim));
			out.setAttribute("x", Integer.toString((int) splitter.getX()));
			out.setAttribute("y", Integer.toString((int) splitter.getY()));
			element.appendChild(out);

			left.print(out); // recurse on children
			right.print(out);
		}

		/**
		 * Check structure for internal consistency. Used in debugging. We check that
		 * the size and height values are correct, and on arriving at the external node
		 * level we check that the point is properly ordered with respect to the
		 * splitters in its ancestors.
		 * 
		 * @param low  A lower bound on a key in this subtree.
		 * @param high An upper bound on a key in this subtree.
		 * @return True if everything is consistent and false otherwise.
		 */
		boolean check(P low, P high) {
			boolean leftCheck = left.check(low, splitter); // check left side
			boolean rightCheck = right.check(splitter, high); // check right side

			if (size != getSize(left) + getSize(right)) {
				System.out.println("Size check fails at internal: " + toString());
				return false;
			} else if (height != 1 + Math.max(getHeight(left), getHeight(right))) {
				System.out.println("Height check fails at internal: " + toString());
				return false;
			} else
				return leftCheck && rightCheck;
		}

		/**
		 * Debug print subtree.
		 * 
		 * @param prefix String indentation to make hierarchy clearer
		 */
		String debugPrint(String prefix) {
			return left.debugPrint(prefix + "| ") + System.lineSeparator() + prefix + toString()
					+ System.lineSeparator() + right.debugPrint(prefix + "| ");
		}

		/**
		 * Print node contents (for debugging).
		 */
		public String toString() {
			return "(" + splitter.toString() + " ht:" + height + " sz:" + size + ")";
		}
		
		P nearN(P point, P best) throws Exception {
			if (splitter != null) {
					best = left.nearN(point, best); 
					
					best = right.nearN(point, best); 				
			} else {
				throw new Exception("EmptyTree");
			}
			return best;
		}
	}

	// -----------------------------------------------------------------
	// External node
	// -----------------------------------------------------------------

	/**
	 * An external node of the tree. This stores an object of type P.
	 */
	private class ExternalNode extends Node {
		final P point; // the associated point object
		private Comparator<P> comparator = new OrderByCoordinate<P>(); // added

		/**
		 * Constructor from a point.
		 * 
		 * @param point The point object stored in this node
		 */
		ExternalNode(P point) {
			super(true);
			this.point = point;
		}

		/**
		 * Find point in external node.
		 * 
		 * @param pt The point to seek
		 * 
		 * @return A reference to the point if found or else null
		 */
		P find(P pt) {
			if (comparator.compare(pt, point) == 0)
				return point;
			else
				return null;
		}

		/**
		 * Insertion at an external node. The point stored in the external node and this
		 * point are placed into a list, and we then invoke buildTree to construct the
		 * associated tree.
		 * 
		 * @param pt The point to insert.
		 * @return The root of the new subtree.
		 */
		Node insert(P pt) throws Exception {
			ArrayList<P> list = new ArrayList<P>(); // array list for points
			list.add(pt); // add points to list
			list.add(point);

			return buildTree(list); // build a tree and return
		}

		/**
		 * Find the scapegoat and rebalance tree.
		 *
		 * @param pt The point defining the search path
		 */
		Node rebalance(P pt) {
			assert (false); // should never get here
			return null;
		}

		/**
		 * Delete from this node.
		 * 
		 * @param pt The point to delete
		 * @return The updated root of the subtree
		 */
		Node delete(P pt) throws Exception {
			if (comparator.compare(pt, point) == 0) { // found it
				return null;
			} else {
				throw new Exception("cityDoesNotExist");
			}
		}

		/**
		 * Add entry to the list.
		 * 
		 * @param list The list into which items are added
		 */
		void entryList(List<P> list) {
			list.add(point);
		}

		/**
		 * Print node information to result.
		 * 
		 * @param element The element of the document
		 */
		void print(Element element) {
			Element out = resultsDoc.createElement("external");
			out.setAttribute("name", point.getName());
			out.setAttribute("x", Integer.toString((int) point.getX()));
			out.setAttribute("y", Integer.toString((int) point.getY()));
			element.appendChild(out);
		}

		/**
		 * Check structure for internal consistency. Used in debugging. We check that
		 * the point is properly ordered with respect to the splitters in its ancestors.
		 * 
		 * @param low  A lower bound on a key in this subtree.
		 * @param high An upper bound on a key in this subtree.
		 * @return True if everything is consistent and false otherwise.
		 */
		boolean check(P low, P high) {
			if ((low != null && comparator.compare(point, low) < 0)
					|| (high != null && comparator.compare(point, high) > 0)) {
				System.out.println("Membership check fails at external: " + toString());
				return false;
			} else {
				return true;
			}
		}

		/**
		 * Debug print subtree.
		 * 
		 * @param prefix String indentation
		 */
		String debugPrint(String prefix) {
			return prefix + toString();
		}

		/**
		 * Convert to string (for debugging).
		 */
		public String toString() {
			return "[" + point.toString() + "]";
		}
		
		P nearN(P qpoint, P best) throws Exception {
			if (best == null) { 
				return point;
			} 
			else { 
				float dist = qpoint.dist(point.getPoint2D());
				float bdist = qpoint.dist(best.getPoint2D());
				if (dist < bdist) {	
					return point;
				} 
				else {
					return best;
				}
			}
		}
	}

	// -----------------------------------------------------------------
	// Tree utilities
	// -----------------------------------------------------------------

	/**
	 * Returns the size of a node's subtree.
	 *
	 * @param p The root of the subtree.
	 *
	 * @return The number of external nodes in the subtree.
	 */
	@SuppressWarnings("unchecked")
	int getSize(Node p) {
		if (p.isExternal)
			return 1;
		else
			return ((InternalNode) p).size;
	}

	/**
	 * Returns the height of a node's subtree.
	 *
	 * @param p The node whose height we seek
	 *
	 * @return The height of the subtree (max no. of edges to external)
	 */
	@SuppressWarnings("unchecked")
	int getHeight(Node p) {
		if (p.isExternal)
			return 0;
		else
			return ((InternalNode) p).height;
	}

	/**
	 * Rebuilds a subtree as a balanced tree. We first invoke entryList to generate
	 * a list of elements stored in the external nodes of this subtree. We then
	 * invoke buildTree to build a tree with these items. We assume that buildTree
	 * will correctly update the sizes and heights of all the nodes of the rebuild
	 * subtree.
	 *
	 * @param p The node whose subtree to rebuild
	 * @return The new root of the subtree
	 */
	Node rebuild(Node p) {
		if (DEBUG) {
			System.out.println("SG tree: Rebuilding subtree rooted at " + p + ". Subtree before rebuild:"
					+ System.lineSeparator() + p.debugPrint(".."));
		}
		if (p.isExternal) {
			return p; // external - nothing to do
		}
		ArrayList<P> list = new ArrayList<P>(); // place to store points
		p.entryList(list); // generate the list
		Node t = buildTree(list); // build new subtree from list
		if (DEBUG) {
			System.out.println("SG tree: Subtree after rebuild:" + System.lineSeparator() + t.debugPrint(".."));
		}
		return t;
	}

	/**
	 * Recursive utility for rebuilding balanced subtrees. This is the main function
	 * for rebuilding subtrees. It operates recursively. If we have a single node we
	 * return a new external node. Otherwise, we split the list of length k into two
	 * sublists, one of length m = ceil(k/2) and the other of length k - m. We
	 * recursively build the left and right subtrees, and link them to an internal
	 * node with the splitter value list[m-1]. (This is based on our convention that
	 * the elements in the left subtree are less than or equal to the splitter.)
	 * 
	 * We allow for the possibility of an empty list, but this really only occurs if
	 * a rebuild is attempted on a completely empty tree.
	 *
	 * @param list The list of points to occupy the new tree
	 * @param i    The index of first item of subarray
	 * @param k    The length of subarray (k >= 0)
	 * @return the root of the rebuilt subtree
	 */
	Node buildTree(List<P> list) {
		int s = list.size();
		if (s == 0) { 
			return null;
		} else if (s == 1) { 
			return new ExternalNode(list.get(0));
		} else {
			List<P> xds = new ArrayList<P>();
			Collections.sort(xds, new OrderByCoordinate<P>());
			List<P> yds = new ArrayList<P>();
			Collections.sort(yds, new YXcompare<P>());
			int dim = 1; int lastx = xds.size() - 1;
			int lasty = yds.size() - 1; int first = 0;
			List<P> listinuse = yds;
			if (xds.get(lastx).getX() - xds.get(first).getX() >= 
					yds.get(lasty).getY() - yds.get(first).getY()) {
				dim = 0;
				listinuse = xds;
			} 
			int mid = s - s/2;
			P spl = listinuse.get(mid - 1);
			Node l = buildTree(listinuse.subList(0, mid));
			Node r = buildTree(listinuse.subList(mid, s));
			InternalNode res = new InternalNode(listinuse.get(mid - 1), l, r, dim);
			res.updateSizeAndHeight(); 
			return res;
		}
	}

	// -----------------------------------------------------------------
	// Private member data
	// -----------------------------------------------------------------

	private Node root = null; // root of the tree
	//private final Comparator<P> comparator; // comparator for ordering the tree
	private final Document resultsDoc; // results document (for printing)
	private int nItems; // number of items (equals getSize(root))
	private int maxItems; // upper bound on the number of items

	// -----------------------------------------------------------------
	// Public members
	// -----------------------------------------------------------------

	/**
	 * Creates an empty tree with the given comparator.
	 *
	 * @param comparator The comparator used for ordering the tree
	 */
	public SGTree(Document resultsDoc) {
		root = null;
		//this.comparator = comparator;
		this.resultsDoc = resultsDoc;
		maxItems = nItems = 0;
	}

	public boolean isEmpty(){
		if (root == null) return true;
		return false;
	}
	
	/**
	 * Size of the tree.
	 *
	 * @return The number of items in the tree
	 */
	public int size() {
		return nItems;
	}

	/**
	 * Find an point in the tree. Note that the point being deleted does not need to
	 * match fully. It suffices that it has enough information to satisfy the
	 * comparator.
	 *
	 * @param pt The item being sought (only the relevant members are needed)
	 * @return A reference to the element where found or null if not found
	 */
	public P find(P pt) {
		if (root == null) {
			return null;
		} else {
			return root.find(pt);
		}
	}

	/**
	 * Insert a point
	 *
	 * @param point The point to be inserted
	 */
	public void insert(P pt) throws Exception {
		if (DEBUG) {
			System.out.println("SG tree: Inserting " + pt);
		}
		if (root == null) {
			root = new ExternalNode(pt);
		} else {
			root = root.insert(pt);
		}
		nItems++;
		maxItems++;
		assert (nItems == getSize(root));
		int maxAllowedHeight = (int) (Math.log(maxItems) / Math.log((double) BALANCE_DENOM / (double) BALANCE_NUM));
		if (getHeight(root) > maxAllowedHeight) {
			root = root.rebalance(pt);
		}
		if (DEBUG) {
			System.out.println("SG tree: After insertion of " + pt + System.lineSeparator() + debugPrint("  "));
			root.check(null, null);
		}
	}

	/**
	 * Delete a point. Note that the point being deleted does not need to match
	 * fully. It suffices that it has enough information to satisfy the comparator.
	 *
	 * @param point The point to be deleted
	 */
	public void delete(P pt) throws Exception {
		if (DEBUG) {
			System.out.println("SG tree: Deleting " + pt);
		}
		if (root == null) {
			throw new Exception("cityDoesNotExist");
		} else {
			root = root.delete(pt);
		}
		nItems--;
		if (2 * nItems < maxItems) {
			root = rebuild(root);
			if (DEBUG) {
				System.out.println("SG tree: Triggered rebuild after deletion. n = " + nItems + " m = " + maxItems);
			}
			maxItems = nItems;
		}
		if (DEBUG) {
			System.out.println("SG tree: After deleting " + pt + System.lineSeparator() + debugPrint("  "));
			root.check(null, null);
		}
	}

	public P nearNS(P qpoint) throws Exception{
			P res = root.nearN(qpoint, null); 
			return res;
	}
	/**
	 * Remove all items, resulting in an empty tree
	 */
	public void clear() {
		root = null;
		maxItems = nItems = 0;
	}

	/**
	 * Return a list of entries
	 *
	 * @return the list of entries for all elements in the tree
	 */
	public List<P> entryList() {
		ArrayList<P> list = new ArrayList<P>();
		if (root != null) {
			root.entryList(list);
		}
		return list;
	}

	/**
	 * Print the tree for debugging purposes
	 * 
	 * @param prefix A string prefix that precedes each line.
	 * @return A string representing the tree
	 */
	String debugPrint(String prefix) {
		if (root != null)
			return root.debugPrint(prefix);
		else
			return new String();
	}

	/**
	 * Print the tree
	 *
	 * @param output the output XML document
	 */
	public void print(Element element) {
		Element out = resultsDoc.createElement("KdTree");
		element.appendChild(out);
		if (root != null)
			root.print(out);
	}

}
